# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_morlet', [dirname(__file__)])
        except ImportError:
            import _morlet
            return _morlet
        if fp is not None:
            try:
                _mod = imp.load_module('_morlet', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _morlet = swig_import_helper()
    del swig_import_helper
else:
    import _morlet
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class MorletWaveletTransform(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MorletWaveletTransform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MorletWaveletTransform, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n_freqs"] = _morlet.MorletWaveletTransform_n_freqs_set
    __swig_getmethods__["n_freqs"] = _morlet.MorletWaveletTransform_n_freqs_get
    if _newclass:
        n_freqs = _swig_property(_morlet.MorletWaveletTransform_n_freqs_get, _morlet.MorletWaveletTransform_n_freqs_set)
    __swig_setmethods__["morlet_wave_ffts"] = _morlet.MorletWaveletTransform_morlet_wave_ffts_set
    __swig_getmethods__["morlet_wave_ffts"] = _morlet.MorletWaveletTransform_morlet_wave_ffts_get
    if _newclass:
        morlet_wave_ffts = _swig_property(_morlet.MorletWaveletTransform_morlet_wave_ffts_get, _morlet.MorletWaveletTransform_morlet_wave_ffts_set)
    __swig_setmethods__["signal_len_"] = _morlet.MorletWaveletTransform_signal_len__set
    __swig_getmethods__["signal_len_"] = _morlet.MorletWaveletTransform_signal_len__get
    if _newclass:
        signal_len_ = _swig_property(_morlet.MorletWaveletTransform_signal_len__get, _morlet.MorletWaveletTransform_signal_len__set)
    __swig_setmethods__["signal_buf"] = _morlet.MorletWaveletTransform_signal_buf_set
    __swig_getmethods__["signal_buf"] = _morlet.MorletWaveletTransform_signal_buf_get
    if _newclass:
        signal_buf = _swig_property(_morlet.MorletWaveletTransform_signal_buf_get, _morlet.MorletWaveletTransform_signal_buf_set)
    __swig_setmethods__["fft_buf"] = _morlet.MorletWaveletTransform_fft_buf_set
    __swig_getmethods__["fft_buf"] = _morlet.MorletWaveletTransform_fft_buf_get
    if _newclass:
        fft_buf = _swig_property(_morlet.MorletWaveletTransform_fft_buf_get, _morlet.MorletWaveletTransform_fft_buf_set)
    __swig_setmethods__["prod_buf"] = _morlet.MorletWaveletTransform_prod_buf_set
    __swig_getmethods__["prod_buf"] = _morlet.MorletWaveletTransform_prod_buf_get
    if _newclass:
        prod_buf = _swig_property(_morlet.MorletWaveletTransform_prod_buf_get, _morlet.MorletWaveletTransform_prod_buf_set)
    __swig_setmethods__["result_buf"] = _morlet.MorletWaveletTransform_result_buf_set
    __swig_getmethods__["result_buf"] = _morlet.MorletWaveletTransform_result_buf_get
    if _newclass:
        result_buf = _swig_property(_morlet.MorletWaveletTransform_result_buf_get, _morlet.MorletWaveletTransform_result_buf_set)
    __swig_setmethods__["n_plans"] = _morlet.MorletWaveletTransform_n_plans_set
    __swig_getmethods__["n_plans"] = _morlet.MorletWaveletTransform_n_plans_get
    if _newclass:
        n_plans = _swig_property(_morlet.MorletWaveletTransform_n_plans_get, _morlet.MorletWaveletTransform_n_plans_set)
    __swig_setmethods__["plan_for_signal"] = _morlet.MorletWaveletTransform_plan_for_signal_set
    __swig_getmethods__["plan_for_signal"] = _morlet.MorletWaveletTransform_plan_for_signal_get
    if _newclass:
        plan_for_signal = _swig_property(_morlet.MorletWaveletTransform_plan_for_signal_get, _morlet.MorletWaveletTransform_plan_for_signal_set)
    __swig_setmethods__["plan_for_inverse_transform"] = _morlet.MorletWaveletTransform_plan_for_inverse_transform_set
    __swig_getmethods__["plan_for_inverse_transform"] = _morlet.MorletWaveletTransform_plan_for_inverse_transform_get
    if _newclass:
        plan_for_inverse_transform = _swig_property(_morlet.MorletWaveletTransform_plan_for_inverse_transform_get, _morlet.MorletWaveletTransform_plan_for_inverse_transform_set)

    def __init__(self):
        this = _morlet.new_MorletWaveletTransform()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _morlet.delete_MorletWaveletTransform
    __del__ = lambda self: None

    def init(self, width, low_freq, high_freq, nf, sample_freq, signal_len):
        return _morlet.MorletWaveletTransform_init(self, width, low_freq, high_freq, nf, sample_freq, signal_len)

    def multiphasevec_powers(self, signal, powers):
        return _morlet.MorletWaveletTransform_multiphasevec_powers(self, signal, powers)

    def multiphasevec(self, signal, powers):
        return _morlet.MorletWaveletTransform_multiphasevec(self, signal, powers)
MorletWaveletTransform_swigregister = _morlet.MorletWaveletTransform_swigregister
MorletWaveletTransform_swigregister(MorletWaveletTransform)

# This file is compatible with both classic and new-style classes.


