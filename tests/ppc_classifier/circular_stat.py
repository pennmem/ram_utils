# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_circular_stat', [dirname(__file__)])
        except ImportError:
            import _circular_stat
            return _circular_stat
        if fp is not None:
            try:
                _mod = imp.load_module('_circular_stat', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _circular_stat = swig_import_helper()
    del swig_import_helper
else:
    import _circular_stat
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def circ_diff(c1, c2, cdiff):
    return _circular_stat.circ_diff(c1, c2, cdiff)
circ_diff = _circular_stat.circ_diff

def circ_diff_par(c1, c2, cdiff, n_threads):
    return _circular_stat.circ_diff_par(c1, c2, cdiff, n_threads)
circ_diff_par = _circular_stat.circ_diff_par

def resultant_vector(c):
    return _circular_stat.resultant_vector(c)
resultant_vector = _circular_stat.resultant_vector

def resultant_vector_length(c):
    return _circular_stat.resultant_vector_length(c)
resultant_vector_length = _circular_stat.resultant_vector_length

def circ_mean(c):
    return _circular_stat.circ_mean(c)
circ_mean = _circular_stat.circ_mean

def circ_diff_time_bins(c1, c2, cdiff, cdiff_means):
    return _circular_stat.circ_diff_time_bins(c1, c2, cdiff, cdiff_means)
circ_diff_time_bins = _circular_stat.circ_diff_time_bins

def compute_f_stat(phase_diff_mat, recalls, f_stat_mat):
    return _circular_stat.compute_f_stat(phase_diff_mat, recalls, f_stat_mat)
compute_f_stat = _circular_stat.compute_f_stat

def compute_zscores(mat, n_perms):
    return _circular_stat.compute_zscores(mat, n_perms)
compute_zscores = _circular_stat.compute_zscores

def single_trial_ppc_all_features(recalls, wavelets, ppc_output, theta_sum_recalls, theta_sum_non_recalls, n_freqs, n_bps, n_threads):
    return _circular_stat.single_trial_ppc_all_features(recalls, wavelets, ppc_output, theta_sum_recalls, theta_sum_non_recalls, n_freqs, n_bps, n_threads)
single_trial_ppc_all_features = _circular_stat.single_trial_ppc_all_features

def single_trial_outsample_ppc_features(wavelets, theta_avg_recalls, theta_avg_non_recalls, outsample_ppc_features, n_freqs, n_bps, n_threads):
    return _circular_stat.single_trial_outsample_ppc_features(wavelets, theta_avg_recalls, theta_avg_non_recalls, outsample_ppc_features, n_freqs, n_bps, n_threads)
single_trial_outsample_ppc_features = _circular_stat.single_trial_outsample_ppc_features
# This file is compatible with both classic and new-style classes.


